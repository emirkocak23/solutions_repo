{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 # \ud83d\udcd8 Theoretical Foundation \ud83e\uddee Derivation of Projectile Motion from Newton's Laws We begin by considering a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The motion can be decomposed into two perpendicular components: Horizontal (x-axis) Vertical (y-axis) \u2733\ufe0f Assumptions: No air resistance Constant gravitational acceleration \\(g\\) Launched from the origin at time \\(t = 0\\) \ud83d\ude80 1. Equations of Motion Horizontal motion (constant velocity): - Acceleration: \\(a_x = 0\\) - Velocity: \\(v_x = v_0\\cos(\\theta)\\) - Displacement: $$ x(t) = v_0\\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): - Acceleration: \\(a_y = -g\\) - Velocity: \\(v_y = v_0\\sin(\\theta) - gt\\) - Displacement: $$ y(t) = v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ \ud83d\udccf 2. Time of Flight The projectile hits the ground when \\(y(t) = 0\\) . Solving: \\[ v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 = 0 \\] \\[ t(v_0\\sin(\\theta) - \\frac{1}{2}gt) = 0 \\] Non-zero solution: \\[ t = \\frac{2v_0\\sin(\\theta)}{g} \\] \u2194\ufe0f 3. Horizontal Range \\(R\\) Substitute the total time of flight into the horizontal displacement: \\[ R = x(t) = v_0\\cos(\\theta) \\cdot \\frac{2v_0\\sin(\\theta)}{g} \\] \\[ \\boxed{R = \\frac{v_0^2\\sin(2\\theta)}{g}} \\] This shows that range is maximum when \\(\\sin(2\\theta) = 1\\) , i.e. \\(\\theta = 45^\\circ\\) \ud83e\uddea 4. Effect of Initial Conditions on Range Initial Velocity \\(v_0\\) : Range is proportional to \\(v_0^2\\) Doubling speed increases range fourfold Angle \\(\\theta\\) : Affects both vertical and horizontal components Maximum range at \\(\\theta = 45^\\circ\\) (in symmetric conditions) Gravitational Acceleration \\(g\\) : Inverse relation: higher gravity \u2192 shorter range Launch Height (not included above) : Adds vertical displacement Increases total time in air \u2192 longer range (needs new derivation) \u2705 These equations form the idealized model of projectile motion, laying the foundation for further numerical or simulation-based analysis. \ud83d\udcca Analysis of the Range \ud83d\udd0d 1. Mathematical Relationship Between Range and Angle Using the derived formula from earlier: \\[ R=\\frac{v_0^2\\sin(2\\theta)}{g} \\] Where: - \\(R\\) is the horizontal range - \\(v_0\\) is the initial velocity - \\(\\theta\\) is the launch angle - \\(g\\) is the acceleration due to gravity \ud83d\udd39 Key Observations: Range depends non-linearly on \\(\\theta\\) through \\(\\sin(2\\theta)\\) . The function \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta=90^\\circ\\) . Therefore, the maximum range occurs at : $$ \\boxed{\\theta=45^\\circ} $$ \u2699\ufe0f 2. Effect of Initial Velocity ( \\(v_0\\) ) From the formula: \\[ R\\propto v_0^2 \\] Doubling \\(v_0\\) quadruples the range. Plotting range vs. angle for different velocities shifts the amplitude of the curve but not the position of the peak. \ud83c\udf0d 3. Effect of Gravitational Acceleration ( \\(g\\) ) Range is inversely proportional to \\(g\\) : \\[ R\\propto\\frac{1}{g} \\] Lower gravity (e.g., on the Moon) results in a longer range . Higher gravity (e.g., on Jupiter) produces a shorter range . \ud83e\uddd7 4. Launch Height (Advanced) When the projectile is launched from a height \\(h>0\\) , total time of flight increases. The vertical displacement becomes: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h \\] To find time of flight \\(t_f\\) , solve: \\[ 0=h+v_0\\sin(\\theta)t_f-\\frac{1}{2}gt_f^2 \\] This is a quadratic in \\(t_f\\) : \\[ \\frac{1}{2}gt_f^2-v_0\\sin(\\theta)t_f-h=0 \\] Solve for \\(t_f\\) using the quadratic formula: \\[ t_f=\\frac{v_0\\sin(\\theta)+\\sqrt{(v_0\\sin(\\theta))^2+2gh}}{g} \\] Then calculate range: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] \u26a0\ufe0f Note: Range increases with height. The angle for maximum range no longer remains 45\u00b0 when launching from a height. \u2705 Summary Parameter Effect on Range Initial Velocity \\(v_0\\) Quadratic increase ( \\(\\propto v_0^2\\) ) Launch Angle \\(\\theta\\) Max at \\(45^\\circ\\) (flat launch) Gravity \\(g\\) Inversely proportional Launch Height \\(h\\) Increases range, changes optimal angle This analysis provides a full picture of how the range responds to varying parameters in ideal and slightly more realistic conditions. \ud83c\udf10 Practical Applications of Projectile Motion \ud83c\udfaf 1. Real-World Situations Involving Projectile Motion Projectile motion is observed in various natural and engineered systems: Sports: A soccer ball, basketball, or javelin follows a projectile path after being launched. The initial velocity and launch angle determine whether the ball reaches the goal or basket. Engineering: Water fountains or fire hoses arc based on launch parameters. Ballistics in defense and aerospace engineering heavily depend on accurate projectile modeling. Astrophysics: Space missions use orbital mechanics \u2014 an extension of projectile motion under gravity. Launching a probe involves solving similar equations in non-Earth gravity fields. \ud83c\udf04 2. Effects of Terrain, Drag, and Wind \ud83c\udfde\ufe0f a. Uneven Terrain When projectiles land on non-flat surfaces , the simple range formula no longer applies. Suppose the landing height is different from the launch height \\(h_0\\) , then total time of flight \\(t_f\\) must be found by solving: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h_0 \\] Final range becomes: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] Requires solving a quadratic equation for \\(t_f\\) and using it in range computation. \ud83c\udf2c\ufe0f b. Air Resistance (Drag) Real trajectories are affected by drag force proportional to velocity: \\[ F_d=-kv \\] Where: - \\(F_d\\) is the drag force, - \\(k\\) is a constant depending on air density and shape, - \\(v\\) is velocity. This leads to nonlinear differential equations : In horizontal direction: $$ m\\frac{dv_x}{dt}=-kv_x $$ In vertical direction: $$ m\\frac{dv_y}{dt}=-mg-kv_y $$ These must be solved numerically using techniques like Euler\u2019s method or Runge-Kutta. \ud83c\udf2a\ufe0f c. Wind Wind introduces additional velocity components: - Tailwind increases range. - Headwind decreases range. - Crosswind changes the direction of the projectile, affecting accuracy. Effective horizontal velocity becomes: \\[ v_{\\text{effective}}=v_0\\cos(\\theta)\\pm v_{\\text{wind}} \\] \ud83e\udde0 3. Adapting the Model To make the model more realistic: Include drag : Use numerical simulation (e.g., Runge-Kutta) to solve motion with air resistance. Include wind : Modify initial velocity vector to account for wind speed and direction. Simulate terrain : Adjust impact height based on known terrain elevation data. \u2705 Summary Realistic Factor Effect on Range Modeling Approach Uneven Terrain Alters time of flight Quadratic equation with height offset Air Resistance Shortens range significantly Numerical solution of ODEs Wind Alters path and accuracy Adjust velocity components By expanding our model, we bridge the gap between ideal physics and real-world scenarios, increasing the accuracy and relevance of projectile analysis. \ud83d\ude80 Implementation: Computational Simulation of Projectile Motion This section provides a Python implementation to simulate projectile motion, analyze the range as a function of angle, and visualize the effects of varying initial conditions. \ud83d\udccc Objective Simulate projectile motion under ideal conditions. Plot Range vs. Angle of Projection . Allow the user to vary: Initial velocity \\(v_0\\) Gravitational acceleration \\(g\\) Initial height \\(h_0\\) \ud83d\udc0d Python Code (Jupyter Notebook Compatible) import numpy as np import matplotlib.pyplot as plt # --- Function to calculate range --- def calculate_range(v0, angle_deg, g=9.81, h0=0): angle_rad = np.radians(angle_deg) v0x = v0 * np.cos(angle_rad) v0y = v0 * np.sin(angle_rad) if h0 == 0: # Flat terrain (simplified range formula) R = (v0**2 * np.sin(2 * angle_rad)) / g else: # Non-zero launch height, solve for time of flight and range t_flight = (v0y + np.sqrt(v0y**2 + 2 * g * h0)) / g R = v0x * t_flight return R # --- Function to simulate and plot --- def plot_range_vs_angle(v0, g=9.81, h0=0): angles = np.linspace(0, 90, 500) ranges = [calculate_range(v0, angle, g, h0) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f'v\u2080={v0} m/s, g={g} m/s\u00b2, h\u2080={h0} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # --- Example usage --- # Modify these parameters to explore different conditions initial_velocity = 30 # m/s gravity = 9.81 # m/s\u00b2 initial_height = 0 # m plot_range_vs_angle(initial_velocity, gravity, initial_height)","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"# \ud83d\udcd8 Theoretical Foundation","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-projectile-motion-from-newtons-laws","text":"We begin by considering a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The motion can be decomposed into two perpendicular components: Horizontal (x-axis) Vertical (y-axis)","title":"\ud83e\uddee Derivation of Projectile Motion from Newton's Laws"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#assumptions","text":"No air resistance Constant gravitational acceleration \\(g\\) Launched from the origin at time \\(t = 0\\)","title":"\u2733\ufe0f Assumptions:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-equations-of-motion","text":"Horizontal motion (constant velocity): - Acceleration: \\(a_x = 0\\) - Velocity: \\(v_x = v_0\\cos(\\theta)\\) - Displacement: $$ x(t) = v_0\\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): - Acceleration: \\(a_y = -g\\) - Velocity: \\(v_y = v_0\\sin(\\theta) - gt\\) - Displacement: $$ y(t) = v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$","title":"\ud83d\ude80 1. Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-time-of-flight","text":"The projectile hits the ground when \\(y(t) = 0\\) . Solving: \\[ v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 = 0 \\] \\[ t(v_0\\sin(\\theta) - \\frac{1}{2}gt) = 0 \\] Non-zero solution: \\[ t = \\frac{2v_0\\sin(\\theta)}{g} \\]","title":"\ud83d\udccf 2. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-horizontal-range-r","text":"Substitute the total time of flight into the horizontal displacement: \\[ R = x(t) = v_0\\cos(\\theta) \\cdot \\frac{2v_0\\sin(\\theta)}{g} \\] \\[ \\boxed{R = \\frac{v_0^2\\sin(2\\theta)}{g}} \\] This shows that range is maximum when \\(\\sin(2\\theta) = 1\\) , i.e. \\(\\theta = 45^\\circ\\)","title":"\u2194\ufe0f 3. Horizontal Range \\(R\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-effect-of-initial-conditions-on-range","text":"Initial Velocity \\(v_0\\) : Range is proportional to \\(v_0^2\\) Doubling speed increases range fourfold Angle \\(\\theta\\) : Affects both vertical and horizontal components Maximum range at \\(\\theta = 45^\\circ\\) (in symmetric conditions) Gravitational Acceleration \\(g\\) : Inverse relation: higher gravity \u2192 shorter range Launch Height (not included above) : Adds vertical displacement Increases total time in air \u2192 longer range (needs new derivation)","title":"\ud83e\uddea 4. Effect of Initial Conditions on Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#these-equations-form-the-idealized-model-of-projectile-motion-laying-the-foundation-for-further-numerical-or-simulation-based-analysis","text":"","title":"\u2705 These equations form the idealized model of projectile motion, laying the foundation for further numerical or simulation-based analysis."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"","title":"\ud83d\udcca Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-mathematical-relationship-between-range-and-angle","text":"Using the derived formula from earlier: \\[ R=\\frac{v_0^2\\sin(2\\theta)}{g} \\] Where: - \\(R\\) is the horizontal range - \\(v_0\\) is the initial velocity - \\(\\theta\\) is the launch angle - \\(g\\) is the acceleration due to gravity","title":"\ud83d\udd0d 1. Mathematical Relationship Between Range and Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Range depends non-linearly on \\(\\theta\\) through \\(\\sin(2\\theta)\\) . The function \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta=90^\\circ\\) . Therefore, the maximum range occurs at : $$ \\boxed{\\theta=45^\\circ} $$","title":"\ud83d\udd39 Key Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-effect-of-initial-velocity-v_0","text":"From the formula: \\[ R\\propto v_0^2 \\] Doubling \\(v_0\\) quadruples the range. Plotting range vs. angle for different velocities shifts the amplitude of the curve but not the position of the peak.","title":"\u2699\ufe0f 2. Effect of Initial Velocity (\\(v_0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-effect-of-gravitational-acceleration-g","text":"Range is inversely proportional to \\(g\\) : \\[ R\\propto\\frac{1}{g} \\] Lower gravity (e.g., on the Moon) results in a longer range . Higher gravity (e.g., on Jupiter) produces a shorter range .","title":"\ud83c\udf0d 3. Effect of Gravitational Acceleration (\\(g\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-launch-height-advanced","text":"When the projectile is launched from a height \\(h>0\\) , total time of flight increases. The vertical displacement becomes: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h \\] To find time of flight \\(t_f\\) , solve: \\[ 0=h+v_0\\sin(\\theta)t_f-\\frac{1}{2}gt_f^2 \\] This is a quadratic in \\(t_f\\) : \\[ \\frac{1}{2}gt_f^2-v_0\\sin(\\theta)t_f-h=0 \\] Solve for \\(t_f\\) using the quadratic formula: \\[ t_f=\\frac{v_0\\sin(\\theta)+\\sqrt{(v_0\\sin(\\theta))^2+2gh}}{g} \\] Then calculate range: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\]","title":"\ud83e\uddd7 4. Launch Height (Advanced)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#note","text":"Range increases with height. The angle for maximum range no longer remains 45\u00b0 when launching from a height.","title":"\u26a0\ufe0f Note:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary","text":"Parameter Effect on Range Initial Velocity \\(v_0\\) Quadratic increase ( \\(\\propto v_0^2\\) ) Launch Angle \\(\\theta\\) Max at \\(45^\\circ\\) (flat launch) Gravity \\(g\\) Inversely proportional Launch Height \\(h\\) Increases range, changes optimal angle","title":"\u2705 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#this-analysis-provides-a-full-picture-of-how-the-range-responds-to-varying-parameters-in-ideal-and-slightly-more-realistic-conditions","text":"","title":"This analysis provides a full picture of how the range responds to varying parameters in ideal and slightly more realistic conditions."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications-of-projectile-motion","text":"","title":"\ud83c\udf10 Practical Applications of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-real-world-situations-involving-projectile-motion","text":"Projectile motion is observed in various natural and engineered systems: Sports: A soccer ball, basketball, or javelin follows a projectile path after being launched. The initial velocity and launch angle determine whether the ball reaches the goal or basket. Engineering: Water fountains or fire hoses arc based on launch parameters. Ballistics in defense and aerospace engineering heavily depend on accurate projectile modeling. Astrophysics: Space missions use orbital mechanics \u2014 an extension of projectile motion under gravity. Launching a probe involves solving similar equations in non-Earth gravity fields.","title":"\ud83c\udfaf 1. Real-World Situations Involving Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-effects-of-terrain-drag-and-wind","text":"","title":"\ud83c\udf04 2. Effects of Terrain, Drag, and Wind"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#a-uneven-terrain","text":"When projectiles land on non-flat surfaces , the simple range formula no longer applies. Suppose the landing height is different from the launch height \\(h_0\\) , then total time of flight \\(t_f\\) must be found by solving: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h_0 \\] Final range becomes: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] Requires solving a quadratic equation for \\(t_f\\) and using it in range computation.","title":"\ud83c\udfde\ufe0f a. Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#b-air-resistance-drag","text":"Real trajectories are affected by drag force proportional to velocity: \\[ F_d=-kv \\] Where: - \\(F_d\\) is the drag force, - \\(k\\) is a constant depending on air density and shape, - \\(v\\) is velocity. This leads to nonlinear differential equations : In horizontal direction: $$ m\\frac{dv_x}{dt}=-kv_x $$ In vertical direction: $$ m\\frac{dv_y}{dt}=-mg-kv_y $$ These must be solved numerically using techniques like Euler\u2019s method or Runge-Kutta.","title":"\ud83c\udf2c\ufe0f b. Air Resistance (Drag)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#c-wind","text":"Wind introduces additional velocity components: - Tailwind increases range. - Headwind decreases range. - Crosswind changes the direction of the projectile, affecting accuracy. Effective horizontal velocity becomes: \\[ v_{\\text{effective}}=v_0\\cos(\\theta)\\pm v_{\\text{wind}} \\]","title":"\ud83c\udf2a\ufe0f c. Wind"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-adapting-the-model","text":"To make the model more realistic: Include drag : Use numerical simulation (e.g., Runge-Kutta) to solve motion with air resistance. Include wind : Modify initial velocity vector to account for wind speed and direction. Simulate terrain : Adjust impact height based on known terrain elevation data.","title":"\ud83e\udde0 3. Adapting the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary_1","text":"Realistic Factor Effect on Range Modeling Approach Uneven Terrain Alters time of flight Quadratic equation with height offset Air Resistance Shortens range significantly Numerical solution of ODEs Wind Alters path and accuracy Adjust velocity components By expanding our model, we bridge the gap between ideal physics and real-world scenarios, increasing the accuracy and relevance of projectile analysis.","title":"\u2705 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation-computational-simulation-of-projectile-motion","text":"This section provides a Python implementation to simulate projectile motion, analyze the range as a function of angle, and visualize the effects of varying initial conditions.","title":"\ud83d\ude80 Implementation: Computational Simulation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#objective","text":"Simulate projectile motion under ideal conditions. Plot Range vs. Angle of Projection . Allow the user to vary: Initial velocity \\(v_0\\) Gravitational acceleration \\(g\\) Initial height \\(h_0\\)","title":"\ud83d\udccc Objective"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-code-jupyter-notebook-compatible","text":"","title":"\ud83d\udc0d Python Code (Jupyter Notebook Compatible)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_1","text":"import numpy as np import matplotlib.pyplot as plt # --- Function to calculate range --- def calculate_range(v0, angle_deg, g=9.81, h0=0): angle_rad = np.radians(angle_deg) v0x = v0 * np.cos(angle_rad) v0y = v0 * np.sin(angle_rad) if h0 == 0: # Flat terrain (simplified range formula) R = (v0**2 * np.sin(2 * angle_rad)) / g else: # Non-zero launch height, solve for time of flight and range t_flight = (v0y + np.sqrt(v0y**2 + 2 * g * h0)) / g R = v0x * t_flight return R # --- Function to simulate and plot --- def plot_range_vs_angle(v0, g=9.81, h0=0): angles = np.linspace(0, 90, 500) ranges = [calculate_range(v0, angle, g, h0) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f'v\u2080={v0} m/s, g={g} m/s\u00b2, h\u2080={h0} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # --- Example usage --- # Modify these parameters to explore different conditions initial_velocity = 30 # m/s gravity = 9.81 # m/s\u00b2 initial_height = 0 # m plot_range_vs_angle(initial_velocity, gravity, initial_height)","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \u2705 Task Breakdown: Investigating the Dynamics of a Forced Damped Pendulum I. Theoretical Foundation \ud83d\udccc Governing Equation The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) : Angular displacement - \\(b\\) : Damping coefficient - \\(g\\) : Gravitational acceleration - \\(L\\) : Length of the pendulum - \\(A\\) : Amplitude of the external driving force - \\(\\omega\\) : Frequency of the external driving force \ud83d\udccc Small-Angle Approximation For small oscillations where \\(|\\theta| \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] Substituting this into the governing equation gives: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A\\cos(\\omega t) \\] This is a linear second-order nonhomogeneous differential equation and can be analyzed more easily than the original nonlinear equation. \ud83d\udccc Approximate Analytical Solution The general solution consists of: - A homogeneous solution (transient part) depending on initial conditions and damping - A particular solution (steady-state) driven by \\(A\\cos(\\omega t)\\) Assuming a solution of the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] Then, under steady-state conditions, we find: \\[ \\Theta = \\frac{A}{\\sqrt{(g/L - \\omega^2)^2 + (b\\omega)^2}} \\] Where: - \\(\\Theta\\) : Steady-state amplitude - \\(\\delta\\) : Phase lag between driving force and response \ud83d\udccc Resonance Condition Resonance occurs when the denominator is minimized: \\[ \\omega_{\\text{res}} = \\sqrt{\\frac{g}{L} - \\frac{b^2}{2}} \\] At this frequency: - The amplitude \\(\\Theta\\) is maximized - Energy input from the driving force matches the natural oscillation frequency - Physical systems can experience large oscillations (resonance phenomenon) II. Analysis of Dynamics \ud83d\udccc Parameter Dependencies Study how varying the following parameters affects the system: Damping coefficient \\(b\\) : Higher \\(b\\) : Faster decay of oscillations, suppresses chaos Lower \\(b\\) : Allows more complex behavior (e.g., quasiperiodicity, chaos) Driving amplitude \\(A\\) : Small \\(A\\) : Linear, predictable motion Large \\(A\\) : Can induce chaotic behavior Driving frequency \\(\\omega\\) : Near resonance: Maximum energy transfer Away from resonance: Damped response \ud83d\udccc Characterizing Motion Regimes Depending on parameters, the pendulum may exhibit: Periodic motion : Oscillations repeat after a fixed time Seen when damping and driving are moderate Quasiperiodic motion : Oscillations never exactly repeat but show structured patterns Multiple incommensurate frequencies involved Chaotic motion : Sensitive dependence on initial conditions Aperiodic and seemingly random Detected using tools like Poincar\u00e9 sections and Lyapunov exponents \ud83d\udccc Physical Interpretations Periodic : Predictable; useful in clocks and timing systems Quasiperiodic : Found in some biological rhythms and coupled oscillators Chaotic : Reflects unpredictability in systems like weather patterns or turbulent flows III. \ud83d\udee0\ufe0f Practical Applications The forced damped pendulum models a variety of real-world systems that involve periodic driving and energy dissipation. Below are some key applications: \ud83d\udd0b 1. Energy Harvesting Devices Piezoelectric or electromagnetic harvesters often model their mechanical components as damped oscillators with forcing. Vibrations in the environment serve as the driving force. Optimal energy harvesting occurs near resonance , where the amplitude of motion is maximized. The governing dynamics resemble: $$ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A\\cos(\\omega t) $$ Tuning the system to resonate at ambient vibration frequencies enhances energy output. \ud83c\udf09 2. Suspension Bridges and Structural Dynamics Components of bridges or tall buildings behave like forced oscillators under periodic loads (e.g., wind, traffic). The infamous Tacoma Narrows Bridge collapse was due to large-amplitude oscillations caused by wind-driven resonance. Proper damping ( \\(b\\) ) and tuning of natural frequency ( \\(\\sqrt{g/L}\\) ) are crucial in design. \u26a1 3. Driven RLC Circuits Electrical analog of the pendulum: $$ L\\frac{d^2q}{dt^2} + R\\frac{dq}{dt} + \\frac{q}{C} = V_0 \\cos(\\omega t) $$ This is mathematically identical to the forced damped pendulum equation. \\(L\\) , \\(R\\) , and \\(C\\) correspond to inertia , damping , and restoring force , respectively. Used to study resonance , filtering , and signal amplification in electronics. IV. \ud83e\uddee Computational Implementation To study the forced damped pendulum beyond analytical approximations, we implement a numerical simulation using Python. \ud83d\udccc 1. Differential Equation We rewrite the second-order ODE as a system of first-order equations: Let: \\(\\theta = x_1\\) \\(\\dot{\\theta} = x_2\\) Then: \\[ \\begin{cases} \\frac{dx_1}{dt} = x_2 \\\\ \\frac{dx_2}{dt} = -b x_2 - \\frac{g}{L} \\sin(x_1) + A \\cos(\\omega t) \\end{cases} \\] \ud83d\udcbb 2. Python Implementation (V\u0131sual) import numpy as np import matplotlib.pyplot as plt # :straight_ruler: Time parameters dt = 0.01 t_max = 40 t = np.arange(0, t_max, dt) L = 1.0 g = 9.81 omega_0 = np.sqrt(g / L) # :orange_heart: New pastel color palette pastel_colors = ['#a2d2ff', '#ffafcc', '#caffbf', '#ffd6a5', '#bdb2ff'] # :repeat: Runge-Kutta 4th Order Method def runge_kutta(f, Y0, t): Y = np.zeros((len(t), 2)) Y[0] = Y0 for i in range(1, len(t)): k1 = f(t[i-1], Y[i-1]) k2 = f(t[i-1] + dt/2, Y[i-1] + dt/2 * k1) k3 = f(t[i-1] + dt/2, Y[i-1] + dt/2 * k2) k4 = f(t[i-1] + dt, Y[i-1] + dt * k3) Y[i] = Y[i-1] + dt/6 * (k1 + 2*k2 + 2*k3 + k4) return Y # :art: Enhanced Plot Function def plot_pendulum(t, Y, title, color, linestyle='-', marker=None): theta = (Y[:, 0] + np.pi) % (2*np.pi) - np.pi theta_dot = Y[:, 1] fig, axs = plt.subplots(1, 2, figsize=(14, 5), facecolor=\"#f7f7f7\") fig.suptitle(title, fontsize=17, fontweight='bold', color=color) # Time series axs[0].plot(t, theta, color=color, linestyle=linestyle, linewidth=2) axs[0].set_title(\"Angular Position Over Time\", fontsize=13) axs[0].set_xlabel(\"Time (s)\") axs[0].set_ylabel(r\"$\\theta(t)$ (rad)\") axs[0].grid(True, color='#e0e0e0', linestyle=':', linewidth=0.8) # Phase portrait axs[1].plot(theta, theta_dot, color=color, linestyle=linestyle, linewidth=1.8) axs[1].set_title(\"Phase Portrait\", fontsize=13) axs[1].set_xlabel(r\"$\\theta$ (rad)\") axs[1].set_ylabel(r\"$\\dot{\\theta}$ (rad/s)\") axs[1].grid(True, color='#e0e0e0', linestyle=':', linewidth=0.8) plt.tight_layout() plt.show() # :dart: Initial conditions Y0 = np.array([0.3, 0.0]) # :one: Simple Pendulum def simple(t, Y): theta, theta_dot = Y return np.array([theta_dot, -omega_0**2 * np.sin(theta)]) Y = runge_kutta(simple, Y0, t) plot_pendulum(t, Y, \"1) Simple Pendulum :crescent_moon:\", pastel_colors[0], linestyle='-.') # :two: Damped Pendulum gamma = 0.4 def damped(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta)]) Y = runge_kutta(damped, Y0, t) plot_pendulum(t, Y, \"2) Damped Pendulum :droplet:\", pastel_colors[1], linestyle='--') # :three: Forced (no damping) A = 1.0 omega = 0.8 def forced(t, Y): theta, theta_dot = Y return np.array([theta_dot, -omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(forced, Y0, t) plot_pendulum(t, Y, \"3) Forced Pendulum :zap:\", pastel_colors[2], linestyle='-') # :four: Forced + Damped gamma = 0.2 def forced_damped(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(forced_damped, Y0, t) plot_pendulum(t, Y, \"4) Forced Damped Pendulum :cyclone:\", pastel_colors[3], linestyle='dashdot') # :five: Chaotic / Resonant Case A = 1.5 omega = 2.0 gamma = 0.1 def chaotic(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(chaotic, Y0, t) plot_pendulum(t, Y, \"5) Chaotic Pendulum :fire:\", pastel_colors[4], linestyle='solid') \u2705 Bifurcation Diagram (Optional Advanced) To construct a bifurcation diagram: Vary \\(A\\) or \\(\\omega\\) over a range Plot sampled values of \\(\\theta\\) after transients decay Requires looping over parameters and saving final cycle values \ud83d\udc49 This can be added later for a deeper nonlinear analysis. \u2705 With these tools, you can fully explore the transition to chaos , resonance peaks, and sensitive dependence on parameters and initial conditions. Let me know if you'd like the bifurcation loop or enhancements like interactive sliders!","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#task-breakdown-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\u2705 Task Breakdown: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#i-theoretical-foundation","text":"","title":"I. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) : Angular displacement - \\(b\\) : Damping coefficient - \\(g\\) : Gravitational acceleration - \\(L\\) : Length of the pendulum - \\(A\\) : Amplitude of the external driving force - \\(\\omega\\) : Frequency of the external driving force","title":"\ud83d\udccc Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations where \\(|\\theta| \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] Substituting this into the governing equation gives: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A\\cos(\\omega t) \\] This is a linear second-order nonhomogeneous differential equation and can be analyzed more easily than the original nonlinear equation.","title":"\ud83d\udccc Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#approximate-analytical-solution","text":"The general solution consists of: - A homogeneous solution (transient part) depending on initial conditions and damping - A particular solution (steady-state) driven by \\(A\\cos(\\omega t)\\) Assuming a solution of the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] Then, under steady-state conditions, we find: \\[ \\Theta = \\frac{A}{\\sqrt{(g/L - \\omega^2)^2 + (b\\omega)^2}} \\] Where: - \\(\\Theta\\) : Steady-state amplitude - \\(\\delta\\) : Phase lag between driving force and response","title":"\ud83d\udccc Approximate Analytical Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the denominator is minimized: \\[ \\omega_{\\text{res}} = \\sqrt{\\frac{g}{L} - \\frac{b^2}{2}} \\] At this frequency: - The amplitude \\(\\Theta\\) is maximized - Energy input from the driving force matches the natural oscillation frequency - Physical systems can experience large oscillations (resonance phenomenon)","title":"\ud83d\udccc Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#ii-analysis-of-dynamics","text":"","title":"II. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-dependencies","text":"Study how varying the following parameters affects the system: Damping coefficient \\(b\\) : Higher \\(b\\) : Faster decay of oscillations, suppresses chaos Lower \\(b\\) : Allows more complex behavior (e.g., quasiperiodicity, chaos) Driving amplitude \\(A\\) : Small \\(A\\) : Linear, predictable motion Large \\(A\\) : Can induce chaotic behavior Driving frequency \\(\\omega\\) : Near resonance: Maximum energy transfer Away from resonance: Damped response","title":"\ud83d\udccc Parameter Dependencies"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#characterizing-motion-regimes","text":"Depending on parameters, the pendulum may exhibit: Periodic motion : Oscillations repeat after a fixed time Seen when damping and driving are moderate Quasiperiodic motion : Oscillations never exactly repeat but show structured patterns Multiple incommensurate frequencies involved Chaotic motion : Sensitive dependence on initial conditions Aperiodic and seemingly random Detected using tools like Poincar\u00e9 sections and Lyapunov exponents","title":"\ud83d\udccc Characterizing Motion Regimes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#physical-interpretations","text":"Periodic : Predictable; useful in clocks and timing systems Quasiperiodic : Found in some biological rhythms and coupled oscillators Chaotic : Reflects unpredictability in systems like weather patterns or turbulent flows","title":"\ud83d\udccc Physical Interpretations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#iii-practical-applications","text":"The forced damped pendulum models a variety of real-world systems that involve periodic driving and energy dissipation. Below are some key applications:","title":"III. \ud83d\udee0\ufe0f Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-energy-harvesting-devices","text":"Piezoelectric or electromagnetic harvesters often model their mechanical components as damped oscillators with forcing. Vibrations in the environment serve as the driving force. Optimal energy harvesting occurs near resonance , where the amplitude of motion is maximized. The governing dynamics resemble: $$ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A\\cos(\\omega t) $$ Tuning the system to resonate at ambient vibration frequencies enhances energy output.","title":"\ud83d\udd0b 1. Energy Harvesting Devices"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-suspension-bridges-and-structural-dynamics","text":"Components of bridges or tall buildings behave like forced oscillators under periodic loads (e.g., wind, traffic). The infamous Tacoma Narrows Bridge collapse was due to large-amplitude oscillations caused by wind-driven resonance. Proper damping ( \\(b\\) ) and tuning of natural frequency ( \\(\\sqrt{g/L}\\) ) are crucial in design.","title":"\ud83c\udf09 2. Suspension Bridges and Structural Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-driven-rlc-circuits","text":"Electrical analog of the pendulum: $$ L\\frac{d^2q}{dt^2} + R\\frac{dq}{dt} + \\frac{q}{C} = V_0 \\cos(\\omega t) $$ This is mathematically identical to the forced damped pendulum equation. \\(L\\) , \\(R\\) , and \\(C\\) correspond to inertia , damping , and restoring force , respectively. Used to study resonance , filtering , and signal amplification in electronics.","title":"\u26a1 3. Driven RLC Circuits"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#iv-computational-implementation","text":"To study the forced damped pendulum beyond analytical approximations, we implement a numerical simulation using Python.","title":"IV. \ud83e\uddee Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-differential-equation","text":"We rewrite the second-order ODE as a system of first-order equations: Let: \\(\\theta = x_1\\) \\(\\dot{\\theta} = x_2\\) Then: \\[ \\begin{cases} \\frac{dx_1}{dt} = x_2 \\\\ \\frac{dx_2}{dt} = -b x_2 - \\frac{g}{L} \\sin(x_1) + A \\cos(\\omega t) \\end{cases} \\]","title":"\ud83d\udccc 1. Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-python-implementation-vsual","text":"import numpy as np import matplotlib.pyplot as plt # :straight_ruler: Time parameters dt = 0.01 t_max = 40 t = np.arange(0, t_max, dt) L = 1.0 g = 9.81 omega_0 = np.sqrt(g / L) # :orange_heart: New pastel color palette pastel_colors = ['#a2d2ff', '#ffafcc', '#caffbf', '#ffd6a5', '#bdb2ff'] # :repeat: Runge-Kutta 4th Order Method def runge_kutta(f, Y0, t): Y = np.zeros((len(t), 2)) Y[0] = Y0 for i in range(1, len(t)): k1 = f(t[i-1], Y[i-1]) k2 = f(t[i-1] + dt/2, Y[i-1] + dt/2 * k1) k3 = f(t[i-1] + dt/2, Y[i-1] + dt/2 * k2) k4 = f(t[i-1] + dt, Y[i-1] + dt * k3) Y[i] = Y[i-1] + dt/6 * (k1 + 2*k2 + 2*k3 + k4) return Y # :art: Enhanced Plot Function def plot_pendulum(t, Y, title, color, linestyle='-', marker=None): theta = (Y[:, 0] + np.pi) % (2*np.pi) - np.pi theta_dot = Y[:, 1] fig, axs = plt.subplots(1, 2, figsize=(14, 5), facecolor=\"#f7f7f7\") fig.suptitle(title, fontsize=17, fontweight='bold', color=color) # Time series axs[0].plot(t, theta, color=color, linestyle=linestyle, linewidth=2) axs[0].set_title(\"Angular Position Over Time\", fontsize=13) axs[0].set_xlabel(\"Time (s)\") axs[0].set_ylabel(r\"$\\theta(t)$ (rad)\") axs[0].grid(True, color='#e0e0e0', linestyle=':', linewidth=0.8) # Phase portrait axs[1].plot(theta, theta_dot, color=color, linestyle=linestyle, linewidth=1.8) axs[1].set_title(\"Phase Portrait\", fontsize=13) axs[1].set_xlabel(r\"$\\theta$ (rad)\") axs[1].set_ylabel(r\"$\\dot{\\theta}$ (rad/s)\") axs[1].grid(True, color='#e0e0e0', linestyle=':', linewidth=0.8) plt.tight_layout() plt.show() # :dart: Initial conditions Y0 = np.array([0.3, 0.0]) # :one: Simple Pendulum def simple(t, Y): theta, theta_dot = Y return np.array([theta_dot, -omega_0**2 * np.sin(theta)]) Y = runge_kutta(simple, Y0, t) plot_pendulum(t, Y, \"1) Simple Pendulum :crescent_moon:\", pastel_colors[0], linestyle='-.') # :two: Damped Pendulum gamma = 0.4 def damped(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta)]) Y = runge_kutta(damped, Y0, t) plot_pendulum(t, Y, \"2) Damped Pendulum :droplet:\", pastel_colors[1], linestyle='--') # :three: Forced (no damping) A = 1.0 omega = 0.8 def forced(t, Y): theta, theta_dot = Y return np.array([theta_dot, -omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(forced, Y0, t) plot_pendulum(t, Y, \"3) Forced Pendulum :zap:\", pastel_colors[2], linestyle='-') # :four: Forced + Damped gamma = 0.2 def forced_damped(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(forced_damped, Y0, t) plot_pendulum(t, Y, \"4) Forced Damped Pendulum :cyclone:\", pastel_colors[3], linestyle='dashdot') # :five: Chaotic / Resonant Case A = 1.5 omega = 2.0 gamma = 0.1 def chaotic(t, Y): theta, theta_dot = Y return np.array([theta_dot, -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t)]) Y = runge_kutta(chaotic, Y0, t) plot_pendulum(t, Y, \"5) Chaotic Pendulum :fire:\", pastel_colors[4], linestyle='solid')","title":"\ud83d\udcbb 2. Python Implementation (V\u0131sual)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram-optional-advanced","text":"To construct a bifurcation diagram: Vary \\(A\\) or \\(\\omega\\) over a range Plot sampled values of \\(\\theta\\) after transients decay Requires looping over parameters and saving final cycle values \ud83d\udc49 This can be added later for a deeper nonlinear analysis. \u2705 With these tools, you can fully explore the transition to chaos , resonance peaks, and sensitive dependence on parameters and initial conditions. Let me know if you'd like the bifurcation loop or enhancements like interactive sliders!","title":"\u2705 Bifurcation Diagram (Optional Advanced)"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}